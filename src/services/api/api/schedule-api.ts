/* tslint:disable */
/* eslint-disable */
/**
 * Documentation
 * api documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ChangeScheduleDto } from '../models';
// @ts-ignore
import { CreateScheduleDto } from '../models';
// @ts-ignore
import { ScheduleListResponse } from '../models';
// @ts-ignore
import { ScheduleRemoveOneRequest } from '../models';
/**
 * ScheduleApi - axios parameter creator
 * @export
 */
export const ScheduleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateScheduleDto} createScheduleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleControllerCreate: async (createScheduleDto: CreateScheduleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createScheduleDto' is not null or undefined
            assertParamExists('scheduleControllerCreate', 'createScheduleDto', createScheduleDto)
            const localVarPath = `/schedule/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createScheduleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleControllerDoctorList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/schedule/doctor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleControllerPatientList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/schedule/patient`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ScheduleRemoveOneRequest} scheduleRemoveOneRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleControllerRemove: async (scheduleRemoveOneRequest: ScheduleRemoveOneRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleRemoveOneRequest' is not null or undefined
            assertParamExists('scheduleControllerRemove', 'scheduleRemoveOneRequest', scheduleRemoveOneRequest)
            const localVarPath = `/schedule/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleRemoveOneRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ChangeScheduleDto} changeScheduleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleControllerUpdate: async (changeScheduleDto: ChangeScheduleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changeScheduleDto' is not null or undefined
            assertParamExists('scheduleControllerUpdate', 'changeScheduleDto', changeScheduleDto)
            const localVarPath = `/schedule/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeScheduleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScheduleApi - functional programming interface
 * @export
 */
export const ScheduleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScheduleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateScheduleDto} createScheduleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleControllerCreate(createScheduleDto: CreateScheduleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scheduleControllerCreate(createScheduleDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleControllerDoctorList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scheduleControllerDoctorList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleControllerPatientList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scheduleControllerPatientList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ScheduleRemoveOneRequest} scheduleRemoveOneRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleControllerRemove(scheduleRemoveOneRequest: ScheduleRemoveOneRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scheduleControllerRemove(scheduleRemoveOneRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ChangeScheduleDto} changeScheduleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleControllerUpdate(changeScheduleDto: ChangeScheduleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scheduleControllerUpdate(changeScheduleDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScheduleApi - factory interface
 * @export
 */
export const ScheduleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScheduleApiFp(configuration)
    return {
        /**
         * 
         * @param {ScheduleApiScheduleControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleControllerCreate(requestParameters: ScheduleApiScheduleControllerCreateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scheduleControllerCreate(requestParameters.createScheduleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleControllerDoctorList(options?: AxiosRequestConfig): AxiosPromise<ScheduleListResponse> {
            return localVarFp.scheduleControllerDoctorList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleControllerPatientList(options?: AxiosRequestConfig): AxiosPromise<ScheduleListResponse> {
            return localVarFp.scheduleControllerPatientList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ScheduleApiScheduleControllerRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleControllerRemove(requestParameters: ScheduleApiScheduleControllerRemoveRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scheduleControllerRemove(requestParameters.scheduleRemoveOneRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ScheduleApiScheduleControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleControllerUpdate(requestParameters: ScheduleApiScheduleControllerUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.scheduleControllerUpdate(requestParameters.changeScheduleDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for scheduleControllerCreate operation in ScheduleApi.
 * @export
 * @interface ScheduleApiScheduleControllerCreateRequest
 */
export interface ScheduleApiScheduleControllerCreateRequest {
    /**
     * 
     * @type {CreateScheduleDto}
     * @memberof ScheduleApiScheduleControllerCreate
     */
    readonly createScheduleDto: CreateScheduleDto
}

/**
 * Request parameters for scheduleControllerRemove operation in ScheduleApi.
 * @export
 * @interface ScheduleApiScheduleControllerRemoveRequest
 */
export interface ScheduleApiScheduleControllerRemoveRequest {
    /**
     * 
     * @type {ScheduleRemoveOneRequest}
     * @memberof ScheduleApiScheduleControllerRemove
     */
    readonly scheduleRemoveOneRequest: ScheduleRemoveOneRequest
}

/**
 * Request parameters for scheduleControllerUpdate operation in ScheduleApi.
 * @export
 * @interface ScheduleApiScheduleControllerUpdateRequest
 */
export interface ScheduleApiScheduleControllerUpdateRequest {
    /**
     * 
     * @type {ChangeScheduleDto}
     * @memberof ScheduleApiScheduleControllerUpdate
     */
    readonly changeScheduleDto: ChangeScheduleDto
}

/**
 * ScheduleApi - object-oriented interface
 * @export
 * @class ScheduleApi
 * @extends {BaseAPI}
 */
export class ScheduleApi extends BaseAPI {
    /**
     * 
     * @param {ScheduleApiScheduleControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public scheduleControllerCreate(requestParameters: ScheduleApiScheduleControllerCreateRequest, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).scheduleControllerCreate(requestParameters.createScheduleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public scheduleControllerDoctorList(options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).scheduleControllerDoctorList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public scheduleControllerPatientList(options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).scheduleControllerPatientList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ScheduleApiScheduleControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public scheduleControllerRemove(requestParameters: ScheduleApiScheduleControllerRemoveRequest, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).scheduleControllerRemove(requestParameters.scheduleRemoveOneRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ScheduleApiScheduleControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleApi
     */
    public scheduleControllerUpdate(requestParameters: ScheduleApiScheduleControllerUpdateRequest, options?: AxiosRequestConfig) {
        return ScheduleApiFp(this.configuration).scheduleControllerUpdate(requestParameters.changeScheduleDto, options).then((request) => request(this.axios, this.basePath));
    }
}
